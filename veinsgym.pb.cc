// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: veinsgym.proto

#include "veinsgym.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_veinsgym_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Box_veinsgym_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_veinsgym_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Dict_veinsgym_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_veinsgym_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Discrete_veinsgym_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_veinsgym_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Init_veinsgym_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_veinsgym_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiBinary_veinsgym_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_veinsgym_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiDiscrete_veinsgym_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_veinsgym_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shutdown_veinsgym_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_veinsgym_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Step_veinsgym_2eproto;
namespace veinsgym {
namespace proto {
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
  const ::veinsgym::proto::Init* init_;
  const ::veinsgym::proto::Shutdown* shutdown_;
  const ::veinsgym::proto::Step* step_;
} _Request_default_instance_;
class ReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reply> _instance;
  const ::veinsgym::proto::Init* init_;
  const ::veinsgym::proto::Shutdown* shutdown_;
  const ::veinsgym::proto::Space* action_;
} _Reply_default_instance_;
class InitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Init> _instance;
} _Init_default_instance_;
class ShutdownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shutdown> _instance;
} _Shutdown_default_instance_;
class StepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Step> _instance;
} _Step_default_instance_;
class SpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Space> _instance;
  const ::veinsgym::proto::Box* box_;
  const ::veinsgym::proto::Dict* dict_;
  const ::veinsgym::proto::Discrete* discrete_;
  const ::veinsgym::proto::MultiBinary* multi_binary_;
  const ::veinsgym::proto::MultiDiscrete* multi_discrete_;
  const ::veinsgym::proto::Tuple* tuple_;
} _Space_default_instance_;
class BoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Box> _instance;
} _Box_default_instance_;
class Dict_ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dict_Item> _instance;
} _Dict_Item_default_instance_;
class DictDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dict> _instance;
} _Dict_default_instance_;
class DiscreteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Discrete> _instance;
} _Discrete_default_instance_;
class MultiBinaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiBinary> _instance;
} _MultiBinary_default_instance_;
class MultiDiscreteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiDiscrete> _instance;
} _MultiDiscrete_default_instance_;
class TupleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tuple> _instance;
} _Tuple_default_instance_;
}  // namespace proto
}  // namespace veinsgym
static void InitDefaultsscc_info_Box_veinsgym_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::veinsgym::proto::_Box_default_instance_;
    new (ptr) ::veinsgym::proto::Box();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::veinsgym::proto::Box::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Box_veinsgym_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Box_veinsgym_2eproto}, {}};

static void InitDefaultsscc_info_Dict_veinsgym_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::veinsgym::proto::_Space_default_instance_;
    new (ptr) ::veinsgym::proto::Space();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::veinsgym::proto::_Dict_Item_default_instance_;
    new (ptr) ::veinsgym::proto::Dict_Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::veinsgym::proto::_Dict_default_instance_;
    new (ptr) ::veinsgym::proto::Dict();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::veinsgym::proto::_Tuple_default_instance_;
    new (ptr) ::veinsgym::proto::Tuple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::veinsgym::proto::Space::InitAsDefaultInstance();
  ::veinsgym::proto::Dict_Item::InitAsDefaultInstance();
  ::veinsgym::proto::Dict::InitAsDefaultInstance();
  ::veinsgym::proto::Tuple::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Dict_veinsgym_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Dict_veinsgym_2eproto}, {
      &scc_info_Box_veinsgym_2eproto.base,
      &scc_info_Discrete_veinsgym_2eproto.base,
      &scc_info_MultiBinary_veinsgym_2eproto.base,
      &scc_info_MultiDiscrete_veinsgym_2eproto.base,}};

static void InitDefaultsscc_info_Discrete_veinsgym_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::veinsgym::proto::_Discrete_default_instance_;
    new (ptr) ::veinsgym::proto::Discrete();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::veinsgym::proto::Discrete::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Discrete_veinsgym_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Discrete_veinsgym_2eproto}, {}};

static void InitDefaultsscc_info_Init_veinsgym_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::veinsgym::proto::_Init_default_instance_;
    new (ptr) ::veinsgym::proto::Init();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::veinsgym::proto::Init::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Init_veinsgym_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Init_veinsgym_2eproto}, {}};

static void InitDefaultsscc_info_MultiBinary_veinsgym_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::veinsgym::proto::_MultiBinary_default_instance_;
    new (ptr) ::veinsgym::proto::MultiBinary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::veinsgym::proto::MultiBinary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiBinary_veinsgym_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MultiBinary_veinsgym_2eproto}, {}};

static void InitDefaultsscc_info_MultiDiscrete_veinsgym_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::veinsgym::proto::_MultiDiscrete_default_instance_;
    new (ptr) ::veinsgym::proto::MultiDiscrete();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::veinsgym::proto::MultiDiscrete::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiDiscrete_veinsgym_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MultiDiscrete_veinsgym_2eproto}, {}};

static void InitDefaultsscc_info_Reply_veinsgym_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::veinsgym::proto::_Reply_default_instance_;
    new (ptr) ::veinsgym::proto::Reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::veinsgym::proto::Reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Reply_veinsgym_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Reply_veinsgym_2eproto}, {
      &scc_info_Init_veinsgym_2eproto.base,
      &scc_info_Shutdown_veinsgym_2eproto.base,
      &scc_info_Dict_veinsgym_2eproto.base,}};

static void InitDefaultsscc_info_Request_veinsgym_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::veinsgym::proto::_Request_default_instance_;
    new (ptr) ::veinsgym::proto::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::veinsgym::proto::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Request_veinsgym_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Request_veinsgym_2eproto}, {
      &scc_info_Init_veinsgym_2eproto.base,
      &scc_info_Shutdown_veinsgym_2eproto.base,
      &scc_info_Step_veinsgym_2eproto.base,}};

static void InitDefaultsscc_info_Shutdown_veinsgym_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::veinsgym::proto::_Shutdown_default_instance_;
    new (ptr) ::veinsgym::proto::Shutdown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::veinsgym::proto::Shutdown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shutdown_veinsgym_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Shutdown_veinsgym_2eproto}, {}};

static void InitDefaultsscc_info_Step_veinsgym_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::veinsgym::proto::_Step_default_instance_;
    new (ptr) ::veinsgym::proto::Step();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::veinsgym::proto::Step::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Step_veinsgym_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Step_veinsgym_2eproto}, {
      &scc_info_Dict_veinsgym_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_veinsgym_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_veinsgym_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_veinsgym_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_veinsgym_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Request, id_),
  offsetof(::veinsgym::proto::RequestDefaultTypeInternal, init_),
  offsetof(::veinsgym::proto::RequestDefaultTypeInternal, shutdown_),
  offsetof(::veinsgym::proto::RequestDefaultTypeInternal, step_),
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Request, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Reply, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Reply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Reply, id_),
  offsetof(::veinsgym::proto::ReplyDefaultTypeInternal, init_),
  offsetof(::veinsgym::proto::ReplyDefaultTypeInternal, shutdown_),
  offsetof(::veinsgym::proto::ReplyDefaultTypeInternal, action_),
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Reply, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Init, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Init, action_space_code_),
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Init, observation_space_code_),
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Init, reward_space_code_),
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Init, test_space_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Shutdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Step, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Step, observation_),
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Step, reward_),
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Step, test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Space, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Space, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::veinsgym::proto::SpaceDefaultTypeInternal, box_),
  offsetof(::veinsgym::proto::SpaceDefaultTypeInternal, dict_),
  offsetof(::veinsgym::proto::SpaceDefaultTypeInternal, discrete_),
  offsetof(::veinsgym::proto::SpaceDefaultTypeInternal, multi_binary_),
  offsetof(::veinsgym::proto::SpaceDefaultTypeInternal, multi_discrete_),
  offsetof(::veinsgym::proto::SpaceDefaultTypeInternal, tuple_),
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Space, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Box, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Box, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Dict_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Dict_Item, key_),
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Dict_Item, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Dict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Dict, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Discrete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Discrete, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::MultiBinary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::MultiBinary, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::MultiDiscrete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::MultiDiscrete, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Tuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::veinsgym::proto::Tuple, values_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::veinsgym::proto::Request)},
  { 10, -1, sizeof(::veinsgym::proto::Reply)},
  { 20, -1, sizeof(::veinsgym::proto::Init)},
  { 29, -1, sizeof(::veinsgym::proto::Shutdown)},
  { 34, -1, sizeof(::veinsgym::proto::Step)},
  { 42, -1, sizeof(::veinsgym::proto::Space)},
  { 54, -1, sizeof(::veinsgym::proto::Box)},
  { 60, -1, sizeof(::veinsgym::proto::Dict_Item)},
  { 67, -1, sizeof(::veinsgym::proto::Dict)},
  { 73, -1, sizeof(::veinsgym::proto::Discrete)},
  { 79, -1, sizeof(::veinsgym::proto::MultiBinary)},
  { 85, -1, sizeof(::veinsgym::proto::MultiDiscrete)},
  { 91, -1, sizeof(::veinsgym::proto::Tuple)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_Reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_Init_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_Shutdown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_Step_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_Space_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_Box_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_Dict_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_Dict_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_Discrete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_MultiBinary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_MultiDiscrete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::veinsgym::proto::_Tuple_default_instance_),
};

const char descriptor_table_protodef_veinsgym_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016veinsgym.proto\022\016veinsgym.proto\"\232\001\n\007Req"
  "uest\022\n\n\002id\030\001 \001(\004\022$\n\004init\030\002 \001(\0132\024.veinsgy"
  "m.proto.InitH\000\022,\n\010shutdown\030\003 \001(\0132\030.veins"
  "gym.proto.ShutdownH\000\022$\n\004step\030\004 \001(\0132\024.vei"
  "nsgym.proto.StepH\000B\t\n\007payload\"\233\001\n\005Reply\022"
  "\n\n\002id\030\001 \001(\004\022$\n\004init\030\002 \001(\0132\024.veinsgym.pro"
  "to.InitH\000\022,\n\010shutdown\030\003 \001(\0132\030.veinsgym.p"
  "roto.ShutdownH\000\022\'\n\006action\030\004 \001(\0132\025.veinsg"
  "ym.proto.SpaceH\000B\t\n\007payload\"p\n\004Init\022\031\n\021a"
  "ction_space_code\030\001 \001(\t\022\036\n\026observation_sp"
  "ace_code\030\002 \001(\t\022\031\n\021reward_space_code\030\003 \001("
  "\t\022\022\n\ntest_space\030\004 \001(\t\"\n\n\010Shutdown\"~\n\004Ste"
  "p\022*\n\013observation\030\001 \001(\0132\025.veinsgym.proto."
  "Space\022%\n\006reward\030\002 \001(\0132\025.veinsgym.proto.S"
  "pace\022#\n\004test\030\003 \001(\0132\025.veinsgym.proto.Spac"
  "e\"\236\002\n\005Space\022\"\n\003box\030\001 \001(\0132\023.veinsgym.prot"
  "o.BoxH\000\022$\n\004dict\030\002 \001(\0132\024.veinsgym.proto.D"
  "ictH\000\022,\n\010discrete\030\003 \001(\0132\030.veinsgym.proto"
  ".DiscreteH\000\0223\n\014multi_binary\030\004 \001(\0132\033.vein"
  "sgym.proto.MultiBinaryH\000\0227\n\016multi_discre"
  "te\030\005 \001(\0132\035.veinsgym.proto.MultiDiscreteH"
  "\000\022&\n\005tuple\030\006 \001(\0132\025.veinsgym.proto.TupleH"
  "\000B\007\n\005value\"\025\n\003Box\022\016\n\006values\030\001 \003(\001\"l\n\004Dic"
  "t\022)\n\006values\030\001 \003(\0132\031.veinsgym.proto.Dict."
  "Item\0329\n\004Item\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\013"
  "2\025.veinsgym.proto.Space\"\031\n\010Discrete\022\r\n\005v"
  "alue\030\001 \001(\004\"\035\n\013MultiBinary\022\016\n\006values\030\001 \003("
  "\010\"\037\n\rMultiDiscrete\022\016\n\006values\030\001 \003(\004\".\n\005Tu"
  "ple\022%\n\006values\030\001 \003(\0132\025.veinsgym.proto.Spa"
  "ceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_veinsgym_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_veinsgym_2eproto_sccs[10] = {
  &scc_info_Box_veinsgym_2eproto.base,
  &scc_info_Dict_veinsgym_2eproto.base,
  &scc_info_Discrete_veinsgym_2eproto.base,
  &scc_info_Init_veinsgym_2eproto.base,
  &scc_info_MultiBinary_veinsgym_2eproto.base,
  &scc_info_MultiDiscrete_veinsgym_2eproto.base,
  &scc_info_Reply_veinsgym_2eproto.base,
  &scc_info_Request_veinsgym_2eproto.base,
  &scc_info_Shutdown_veinsgym_2eproto.base,
  &scc_info_Step_veinsgym_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_veinsgym_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_veinsgym_2eproto = {
  false, false, descriptor_table_protodef_veinsgym_2eproto, "veinsgym.proto", 1170,
  &descriptor_table_veinsgym_2eproto_once, descriptor_table_veinsgym_2eproto_sccs, descriptor_table_veinsgym_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_veinsgym_2eproto::offsets,
  file_level_metadata_veinsgym_2eproto, 13, file_level_enum_descriptors_veinsgym_2eproto, file_level_service_descriptors_veinsgym_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_veinsgym_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_veinsgym_2eproto)), true);
namespace veinsgym {
namespace proto {

// ===================================================================

void Request::InitAsDefaultInstance() {
  ::veinsgym::proto::_Request_default_instance_.init_ = const_cast< ::veinsgym::proto::Init*>(
      ::veinsgym::proto::Init::internal_default_instance());
  ::veinsgym::proto::_Request_default_instance_.shutdown_ = const_cast< ::veinsgym::proto::Shutdown*>(
      ::veinsgym::proto::Shutdown::internal_default_instance());
  ::veinsgym::proto::_Request_default_instance_.step_ = const_cast< ::veinsgym::proto::Step*>(
      ::veinsgym::proto::Step::internal_default_instance());
}
class Request::_Internal {
 public:
  static const ::veinsgym::proto::Init& init(const Request* msg);
  static const ::veinsgym::proto::Shutdown& shutdown(const Request* msg);
  static const ::veinsgym::proto::Step& step(const Request* msg);
};

const ::veinsgym::proto::Init&
Request::_Internal::init(const Request* msg) {
  return *msg->payload_.init_;
}
const ::veinsgym::proto::Shutdown&
Request::_Internal::shutdown(const Request* msg) {
  return *msg->payload_.shutdown_;
}
const ::veinsgym::proto::Step&
Request::_Internal::step(const Request* msg) {
  return *msg->payload_.step_;
}
void Request::set_allocated_init(::veinsgym::proto::Init* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(init);
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    payload_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Request.init)
}
void Request::set_allocated_shutdown(::veinsgym::proto::Shutdown* shutdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (shutdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shutdown);
    if (message_arena != submessage_arena) {
      shutdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shutdown, submessage_arena);
    }
    set_has_shutdown();
    payload_.shutdown_ = shutdown;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Request.shutdown)
}
void Request::set_allocated_step(::veinsgym::proto::Step* step) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (step) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(step);
    if (message_arena != submessage_arena) {
      step = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, step, submessage_arena);
    }
    set_has_step();
    payload_.step_ = step;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Request.step)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kInit: {
      _internal_mutable_init()->::veinsgym::proto::Init::MergeFrom(from._internal_init());
      break;
    }
    case kShutdown: {
      _internal_mutable_shutdown()->::veinsgym::proto::Shutdown::MergeFrom(from._internal_shutdown());
      break;
    }
    case kStep: {
      _internal_mutable_step()->::veinsgym::proto::Step::MergeFrom(from._internal_step());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_veinsgym_2eproto.base);
  id_ = PROTOBUF_ULONGLONG(0);
  clear_has_payload();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void Request::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:veinsgym.proto.Request)
  switch (payload_case()) {
    case kInit: {
      if (GetArena() == nullptr) {
        delete payload_.init_;
      }
      break;
    }
    case kShutdown: {
      if (GetArena() == nullptr) {
        delete payload_.shutdown_;
      }
      break;
    }
    case kStep: {
      if (GetArena() == nullptr) {
        delete payload_.step_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Init init = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Shutdown shutdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shutdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Step step = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_step(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .veinsgym.proto.Init init = 2;
  if (_internal_has_init()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::init(this), target, stream);
  }

  // .veinsgym.proto.Shutdown shutdown = 3;
  if (_internal_has_shutdown()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shutdown(this), target, stream);
  }

  // .veinsgym.proto.Step step = 4;
  if (_internal_has_step()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::step(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  switch (payload_case()) {
    // .veinsgym.proto.Init init = 2;
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.init_);
      break;
    }
    // .veinsgym.proto.Shutdown shutdown = 3;
    case kShutdown: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.shutdown_);
      break;
    }
    // .veinsgym.proto.Step step = 4;
    case kStep: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.step_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.payload_case()) {
    case kInit: {
      _internal_mutable_init()->::veinsgym::proto::Init::MergeFrom(from._internal_init());
      break;
    }
    case kShutdown: {
      _internal_mutable_shutdown()->::veinsgym::proto::Shutdown::MergeFrom(from._internal_shutdown());
      break;
    }
    case kStep: {
      _internal_mutable_step()->::veinsgym::proto::Step::MergeFrom(from._internal_step());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reply::InitAsDefaultInstance() {
  ::veinsgym::proto::_Reply_default_instance_.init_ = const_cast< ::veinsgym::proto::Init*>(
      ::veinsgym::proto::Init::internal_default_instance());
  ::veinsgym::proto::_Reply_default_instance_.shutdown_ = const_cast< ::veinsgym::proto::Shutdown*>(
      ::veinsgym::proto::Shutdown::internal_default_instance());
  ::veinsgym::proto::_Reply_default_instance_.action_ = const_cast< ::veinsgym::proto::Space*>(
      ::veinsgym::proto::Space::internal_default_instance());
}
class Reply::_Internal {
 public:
  static const ::veinsgym::proto::Init& init(const Reply* msg);
  static const ::veinsgym::proto::Shutdown& shutdown(const Reply* msg);
  static const ::veinsgym::proto::Space& action(const Reply* msg);
};

const ::veinsgym::proto::Init&
Reply::_Internal::init(const Reply* msg) {
  return *msg->payload_.init_;
}
const ::veinsgym::proto::Shutdown&
Reply::_Internal::shutdown(const Reply* msg) {
  return *msg->payload_.shutdown_;
}
const ::veinsgym::proto::Space&
Reply::_Internal::action(const Reply* msg) {
  return *msg->payload_.action_;
}
void Reply::set_allocated_init(::veinsgym::proto::Init* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(init);
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    payload_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Reply.init)
}
void Reply::set_allocated_shutdown(::veinsgym::proto::Shutdown* shutdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (shutdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shutdown);
    if (message_arena != submessage_arena) {
      shutdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shutdown, submessage_arena);
    }
    set_has_shutdown();
    payload_.shutdown_ = shutdown;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Reply.shutdown)
}
void Reply::set_allocated_action(::veinsgym::proto::Space* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    payload_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Reply.action)
}
Reply::Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.Reply)
}
Reply::Reply(const Reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kInit: {
      _internal_mutable_init()->::veinsgym::proto::Init::MergeFrom(from._internal_init());
      break;
    }
    case kShutdown: {
      _internal_mutable_shutdown()->::veinsgym::proto::Shutdown::MergeFrom(from._internal_shutdown());
      break;
    }
    case kAction: {
      _internal_mutable_action()->::veinsgym::proto::Space::MergeFrom(from._internal_action());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.Reply)
}

void Reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reply_veinsgym_2eproto.base);
  id_ = PROTOBUF_ULONGLONG(0);
  clear_has_payload();
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.Reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void Reply::ArenaDtor(void* object) {
  Reply* _this = reinterpret_cast< Reply* >(object);
  (void)_this;
}
void Reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reply& Reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reply_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void Reply::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:veinsgym.proto.Reply)
  switch (payload_case()) {
    case kInit: {
      if (GetArena() == nullptr) {
        delete payload_.init_;
      }
      break;
    }
    case kShutdown: {
      if (GetArena() == nullptr) {
        delete payload_.shutdown_;
      }
      break;
    }
    case kAction: {
      if (GetArena() == nullptr) {
        delete payload_.action_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.Reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Init init = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Shutdown shutdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shutdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Space action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.Reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .veinsgym.proto.Init init = 2;
  if (_internal_has_init()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::init(this), target, stream);
  }

  // .veinsgym.proto.Shutdown shutdown = 3;
  if (_internal_has_shutdown()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shutdown(this), target, stream);
  }

  // .veinsgym.proto.Space action = 4;
  if (_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.Reply)
  return target;
}

size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.Reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  switch (payload_case()) {
    // .veinsgym.proto.Init init = 2;
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.init_);
      break;
    }
    // .veinsgym.proto.Shutdown shutdown = 3;
    case kShutdown: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.shutdown_);
      break;
    }
    // .veinsgym.proto.Space action = 4;
    case kAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.action_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  const Reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.Reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.Reply)
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.payload_case()) {
    case kInit: {
      _internal_mutable_init()->::veinsgym::proto::Init::MergeFrom(from._internal_init());
      break;
    }
    case kShutdown: {
      _internal_mutable_shutdown()->::veinsgym::proto::Shutdown::MergeFrom(from._internal_shutdown());
      break;
    }
    case kAction: {
      _internal_mutable_action()->::veinsgym::proto::Space::MergeFrom(from._internal_action());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  return true;
}

void Reply::InternalSwap(Reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Init::InitAsDefaultInstance() {
}
class Init::_Internal {
 public:
};

Init::Init(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.Init)
}
Init::Init(const Init& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_space_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_space_code().empty()) {
    action_space_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_space_code(),
      GetArena());
  }
  observation_space_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_observation_space_code().empty()) {
    observation_space_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_observation_space_code(),
      GetArena());
  }
  reward_space_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reward_space_code().empty()) {
    reward_space_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reward_space_code(),
      GetArena());
  }
  test_space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test_space().empty()) {
    test_space_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test_space(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.Init)
}

void Init::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Init_veinsgym_2eproto.base);
  action_space_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  observation_space_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_space_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Init::~Init() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.Init)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Init::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  action_space_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  observation_space_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_space_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_space_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Init::ArenaDtor(void* object) {
  Init* _this = reinterpret_cast< Init* >(object);
  (void)_this;
}
void Init::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Init::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Init& Init::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Init_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void Init::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.Init)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_space_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  observation_space_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reward_space_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  test_space_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Init::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string action_space_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_action_space_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "veinsgym.proto.Init.action_space_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string observation_space_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_observation_space_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "veinsgym.proto.Init.observation_space_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reward_space_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reward_space_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "veinsgym.proto.Init.reward_space_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string test_space = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_test_space();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "veinsgym.proto.Init.test_space"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Init::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.Init)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action_space_code = 1;
  if (this->action_space_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_space_code().data(), static_cast<int>(this->_internal_action_space_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "veinsgym.proto.Init.action_space_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action_space_code(), target);
  }

  // string observation_space_code = 2;
  if (this->observation_space_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_observation_space_code().data(), static_cast<int>(this->_internal_observation_space_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "veinsgym.proto.Init.observation_space_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_observation_space_code(), target);
  }

  // string reward_space_code = 3;
  if (this->reward_space_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reward_space_code().data(), static_cast<int>(this->_internal_reward_space_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "veinsgym.proto.Init.reward_space_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reward_space_code(), target);
  }

  // string test_space = 4;
  if (this->test_space().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test_space().data(), static_cast<int>(this->_internal_test_space().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "veinsgym.proto.Init.test_space");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_test_space(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.Init)
  return target;
}

size_t Init::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.Init)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action_space_code = 1;
  if (this->action_space_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_space_code());
  }

  // string observation_space_code = 2;
  if (this->observation_space_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_observation_space_code());
  }

  // string reward_space_code = 3;
  if (this->reward_space_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reward_space_code());
  }

  // string test_space = 4;
  if (this->test_space().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test_space());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Init::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.Init)
  GOOGLE_DCHECK_NE(&from, this);
  const Init* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Init>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.Init)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.Init)
    MergeFrom(*source);
  }
}

void Init::MergeFrom(const Init& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.Init)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_space_code().size() > 0) {
    _internal_set_action_space_code(from._internal_action_space_code());
  }
  if (from.observation_space_code().size() > 0) {
    _internal_set_observation_space_code(from._internal_observation_space_code());
  }
  if (from.reward_space_code().size() > 0) {
    _internal_set_reward_space_code(from._internal_reward_space_code());
  }
  if (from.test_space().size() > 0) {
    _internal_set_test_space(from._internal_test_space());
  }
}

void Init::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.Init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Init::CopyFrom(const Init& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.Init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Init::IsInitialized() const {
  return true;
}

void Init::InternalSwap(Init* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  action_space_code_.Swap(&other->action_space_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  observation_space_code_.Swap(&other->observation_space_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reward_space_code_.Swap(&other->reward_space_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  test_space_.Swap(&other->test_space_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Init::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Shutdown::InitAsDefaultInstance() {
}
class Shutdown::_Internal {
 public:
};

Shutdown::Shutdown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.Shutdown)
}
Shutdown::Shutdown(const Shutdown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.Shutdown)
}

void Shutdown::SharedCtor() {
}

Shutdown::~Shutdown() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.Shutdown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Shutdown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Shutdown::ArenaDtor(void* object) {
  Shutdown* _this = reinterpret_cast< Shutdown* >(object);
  (void)_this;
}
void Shutdown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Shutdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shutdown& Shutdown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shutdown_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void Shutdown::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.Shutdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shutdown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shutdown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.Shutdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.Shutdown)
  return target;
}

size_t Shutdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.Shutdown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shutdown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.Shutdown)
  GOOGLE_DCHECK_NE(&from, this);
  const Shutdown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Shutdown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.Shutdown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.Shutdown)
    MergeFrom(*source);
  }
}

void Shutdown::MergeFrom(const Shutdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.Shutdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Shutdown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.Shutdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shutdown::CopyFrom(const Shutdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.Shutdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shutdown::IsInitialized() const {
  return true;
}

void Shutdown::InternalSwap(Shutdown* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shutdown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Step::InitAsDefaultInstance() {
  ::veinsgym::proto::_Step_default_instance_._instance.get_mutable()->observation_ = const_cast< ::veinsgym::proto::Space*>(
      ::veinsgym::proto::Space::internal_default_instance());
  ::veinsgym::proto::_Step_default_instance_._instance.get_mutable()->reward_ = const_cast< ::veinsgym::proto::Space*>(
      ::veinsgym::proto::Space::internal_default_instance());
  ::veinsgym::proto::_Step_default_instance_._instance.get_mutable()->test_ = const_cast< ::veinsgym::proto::Space*>(
      ::veinsgym::proto::Space::internal_default_instance());
}
class Step::_Internal {
 public:
  static const ::veinsgym::proto::Space& observation(const Step* msg);
  static const ::veinsgym::proto::Space& reward(const Step* msg);
  static const ::veinsgym::proto::Space& test(const Step* msg);
};

const ::veinsgym::proto::Space&
Step::_Internal::observation(const Step* msg) {
  return *msg->observation_;
}
const ::veinsgym::proto::Space&
Step::_Internal::reward(const Step* msg) {
  return *msg->reward_;
}
const ::veinsgym::proto::Space&
Step::_Internal::test(const Step* msg) {
  return *msg->test_;
}
Step::Step(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.Step)
}
Step::Step(const Step& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_observation()) {
    observation_ = new ::veinsgym::proto::Space(*from.observation_);
  } else {
    observation_ = nullptr;
  }
  if (from._internal_has_reward()) {
    reward_ = new ::veinsgym::proto::Space(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  if (from._internal_has_test()) {
    test_ = new ::veinsgym::proto::Space(*from.test_);
  } else {
    test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.Step)
}

void Step::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Step_veinsgym_2eproto.base);
  ::memset(&observation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_) -
      reinterpret_cast<char*>(&observation_)) + sizeof(test_));
}

Step::~Step() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.Step)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Step::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete observation_;
  if (this != internal_default_instance()) delete reward_;
  if (this != internal_default_instance()) delete test_;
}

void Step::ArenaDtor(void* object) {
  Step* _this = reinterpret_cast< Step* >(object);
  (void)_this;
}
void Step::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Step::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Step& Step::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Step_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void Step::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.Step)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && observation_ != nullptr) {
    delete observation_;
  }
  observation_ = nullptr;
  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Step::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .veinsgym.proto.Space observation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Space reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Space test = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Step::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.Step)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .veinsgym.proto.Space observation = 1;
  if (this->has_observation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::observation(this), target, stream);
  }

  // .veinsgym.proto.Space reward = 2;
  if (this->has_reward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reward(this), target, stream);
  }

  // .veinsgym.proto.Space test = 3;
  if (this->has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.Step)
  return target;
}

size_t Step::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.Step)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .veinsgym.proto.Space observation = 1;
  if (this->has_observation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *observation_);
  }

  // .veinsgym.proto.Space reward = 2;
  if (this->has_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // .veinsgym.proto.Space test = 3;
  if (this->has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Step::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.Step)
  GOOGLE_DCHECK_NE(&from, this);
  const Step* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Step>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.Step)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.Step)
    MergeFrom(*source);
  }
}

void Step::MergeFrom(const Step& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.Step)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_observation()) {
    _internal_mutable_observation()->::veinsgym::proto::Space::MergeFrom(from._internal_observation());
  }
  if (from.has_reward()) {
    _internal_mutable_reward()->::veinsgym::proto::Space::MergeFrom(from._internal_reward());
  }
  if (from.has_test()) {
    _internal_mutable_test()->::veinsgym::proto::Space::MergeFrom(from._internal_test());
  }
}

void Step::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Step::CopyFrom(const Step& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Step::IsInitialized() const {
  return true;
}

void Step::InternalSwap(Step* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Step, test_)
      + sizeof(Step::test_)
      - PROTOBUF_FIELD_OFFSET(Step, observation_)>(
          reinterpret_cast<char*>(&observation_),
          reinterpret_cast<char*>(&other->observation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Step::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Space::InitAsDefaultInstance() {
  ::veinsgym::proto::_Space_default_instance_.box_ = const_cast< ::veinsgym::proto::Box*>(
      ::veinsgym::proto::Box::internal_default_instance());
  ::veinsgym::proto::_Space_default_instance_.dict_ = const_cast< ::veinsgym::proto::Dict*>(
      ::veinsgym::proto::Dict::internal_default_instance());
  ::veinsgym::proto::_Space_default_instance_.discrete_ = const_cast< ::veinsgym::proto::Discrete*>(
      ::veinsgym::proto::Discrete::internal_default_instance());
  ::veinsgym::proto::_Space_default_instance_.multi_binary_ = const_cast< ::veinsgym::proto::MultiBinary*>(
      ::veinsgym::proto::MultiBinary::internal_default_instance());
  ::veinsgym::proto::_Space_default_instance_.multi_discrete_ = const_cast< ::veinsgym::proto::MultiDiscrete*>(
      ::veinsgym::proto::MultiDiscrete::internal_default_instance());
  ::veinsgym::proto::_Space_default_instance_.tuple_ = const_cast< ::veinsgym::proto::Tuple*>(
      ::veinsgym::proto::Tuple::internal_default_instance());
}
class Space::_Internal {
 public:
  static const ::veinsgym::proto::Box& box(const Space* msg);
  static const ::veinsgym::proto::Dict& dict(const Space* msg);
  static const ::veinsgym::proto::Discrete& discrete(const Space* msg);
  static const ::veinsgym::proto::MultiBinary& multi_binary(const Space* msg);
  static const ::veinsgym::proto::MultiDiscrete& multi_discrete(const Space* msg);
  static const ::veinsgym::proto::Tuple& tuple(const Space* msg);
};

const ::veinsgym::proto::Box&
Space::_Internal::box(const Space* msg) {
  return *msg->value_.box_;
}
const ::veinsgym::proto::Dict&
Space::_Internal::dict(const Space* msg) {
  return *msg->value_.dict_;
}
const ::veinsgym::proto::Discrete&
Space::_Internal::discrete(const Space* msg) {
  return *msg->value_.discrete_;
}
const ::veinsgym::proto::MultiBinary&
Space::_Internal::multi_binary(const Space* msg) {
  return *msg->value_.multi_binary_;
}
const ::veinsgym::proto::MultiDiscrete&
Space::_Internal::multi_discrete(const Space* msg) {
  return *msg->value_.multi_discrete_;
}
const ::veinsgym::proto::Tuple&
Space::_Internal::tuple(const Space* msg) {
  return *msg->value_.tuple_;
}
void Space::set_allocated_box(::veinsgym::proto::Box* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    set_has_box();
    value_.box_ = box;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Space.box)
}
void Space::set_allocated_dict(::veinsgym::proto::Dict* dict) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (dict) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dict);
    if (message_arena != submessage_arena) {
      dict = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dict, submessage_arena);
    }
    set_has_dict();
    value_.dict_ = dict;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Space.dict)
}
void Space::set_allocated_discrete(::veinsgym::proto::Discrete* discrete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (discrete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(discrete);
    if (message_arena != submessage_arena) {
      discrete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discrete, submessage_arena);
    }
    set_has_discrete();
    value_.discrete_ = discrete;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Space.discrete)
}
void Space::set_allocated_multi_binary(::veinsgym::proto::MultiBinary* multi_binary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (multi_binary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multi_binary);
    if (message_arena != submessage_arena) {
      multi_binary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_binary, submessage_arena);
    }
    set_has_multi_binary();
    value_.multi_binary_ = multi_binary;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Space.multi_binary)
}
void Space::set_allocated_multi_discrete(::veinsgym::proto::MultiDiscrete* multi_discrete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (multi_discrete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multi_discrete);
    if (message_arena != submessage_arena) {
      multi_discrete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_discrete, submessage_arena);
    }
    set_has_multi_discrete();
    value_.multi_discrete_ = multi_discrete;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Space.multi_discrete)
}
void Space::set_allocated_tuple(::veinsgym::proto::Tuple* tuple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (tuple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tuple);
    if (message_arena != submessage_arena) {
      tuple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple, submessage_arena);
    }
    set_has_tuple();
    value_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_set_allocated:veinsgym.proto.Space.tuple)
}
Space::Space(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.Space)
}
Space::Space(const Space& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kBox: {
      _internal_mutable_box()->::veinsgym::proto::Box::MergeFrom(from._internal_box());
      break;
    }
    case kDict: {
      _internal_mutable_dict()->::veinsgym::proto::Dict::MergeFrom(from._internal_dict());
      break;
    }
    case kDiscrete: {
      _internal_mutable_discrete()->::veinsgym::proto::Discrete::MergeFrom(from._internal_discrete());
      break;
    }
    case kMultiBinary: {
      _internal_mutable_multi_binary()->::veinsgym::proto::MultiBinary::MergeFrom(from._internal_multi_binary());
      break;
    }
    case kMultiDiscrete: {
      _internal_mutable_multi_discrete()->::veinsgym::proto::MultiDiscrete::MergeFrom(from._internal_multi_discrete());
      break;
    }
    case kTuple: {
      _internal_mutable_tuple()->::veinsgym::proto::Tuple::MergeFrom(from._internal_tuple());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.Space)
}

void Space::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dict_veinsgym_2eproto.base);
  clear_has_value();
}

Space::~Space() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.Space)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Space::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Space::ArenaDtor(void* object) {
  Space* _this = reinterpret_cast< Space* >(object);
  (void)_this;
}
void Space::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Space::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Space& Space::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dict_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void Space::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:veinsgym.proto.Space)
  switch (value_case()) {
    case kBox: {
      if (GetArena() == nullptr) {
        delete value_.box_;
      }
      break;
    }
    case kDict: {
      if (GetArena() == nullptr) {
        delete value_.dict_;
      }
      break;
    }
    case kDiscrete: {
      if (GetArena() == nullptr) {
        delete value_.discrete_;
      }
      break;
    }
    case kMultiBinary: {
      if (GetArena() == nullptr) {
        delete value_.multi_binary_;
      }
      break;
    }
    case kMultiDiscrete: {
      if (GetArena() == nullptr) {
        delete value_.multi_discrete_;
      }
      break;
    }
    case kTuple: {
      if (GetArena() == nullptr) {
        delete value_.tuple_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Space::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.Space)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Space::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .veinsgym.proto.Box box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Dict dict = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Discrete discrete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_discrete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.MultiBinary multi_binary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.MultiDiscrete multi_discrete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_discrete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Tuple tuple = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Space::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.Space)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .veinsgym.proto.Box box = 1;
  if (_internal_has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::box(this), target, stream);
  }

  // .veinsgym.proto.Dict dict = 2;
  if (_internal_has_dict()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dict(this), target, stream);
  }

  // .veinsgym.proto.Discrete discrete = 3;
  if (_internal_has_discrete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::discrete(this), target, stream);
  }

  // .veinsgym.proto.MultiBinary multi_binary = 4;
  if (_internal_has_multi_binary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::multi_binary(this), target, stream);
  }

  // .veinsgym.proto.MultiDiscrete multi_discrete = 5;
  if (_internal_has_multi_discrete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::multi_discrete(this), target, stream);
  }

  // .veinsgym.proto.Tuple tuple = 6;
  if (_internal_has_tuple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tuple(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.Space)
  return target;
}

size_t Space::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.Space)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .veinsgym.proto.Box box = 1;
    case kBox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.box_);
      break;
    }
    // .veinsgym.proto.Dict dict = 2;
    case kDict: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.dict_);
      break;
    }
    // .veinsgym.proto.Discrete discrete = 3;
    case kDiscrete: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.discrete_);
      break;
    }
    // .veinsgym.proto.MultiBinary multi_binary = 4;
    case kMultiBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.multi_binary_);
      break;
    }
    // .veinsgym.proto.MultiDiscrete multi_discrete = 5;
    case kMultiDiscrete: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.multi_discrete_);
      break;
    }
    // .veinsgym.proto.Tuple tuple = 6;
    case kTuple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.tuple_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Space::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.Space)
  GOOGLE_DCHECK_NE(&from, this);
  const Space* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Space>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.Space)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.Space)
    MergeFrom(*source);
  }
}

void Space::MergeFrom(const Space& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.Space)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kBox: {
      _internal_mutable_box()->::veinsgym::proto::Box::MergeFrom(from._internal_box());
      break;
    }
    case kDict: {
      _internal_mutable_dict()->::veinsgym::proto::Dict::MergeFrom(from._internal_dict());
      break;
    }
    case kDiscrete: {
      _internal_mutable_discrete()->::veinsgym::proto::Discrete::MergeFrom(from._internal_discrete());
      break;
    }
    case kMultiBinary: {
      _internal_mutable_multi_binary()->::veinsgym::proto::MultiBinary::MergeFrom(from._internal_multi_binary());
      break;
    }
    case kMultiDiscrete: {
      _internal_mutable_multi_discrete()->::veinsgym::proto::MultiDiscrete::MergeFrom(from._internal_multi_discrete());
      break;
    }
    case kTuple: {
      _internal_mutable_tuple()->::veinsgym::proto::Tuple::MergeFrom(from._internal_tuple());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Space::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.Space)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Space::CopyFrom(const Space& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.Space)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Space::IsInitialized() const {
  return true;
}

void Space::InternalSwap(Space* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Space::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Box::InitAsDefaultInstance() {
}
class Box::_Internal {
 public:
};

Box::Box(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.Box)
}
Box::Box(const Box& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.Box)
}

void Box::SharedCtor() {
}

Box::~Box() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.Box)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Box::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Box::ArenaDtor(void* object) {
  Box* _this = reinterpret_cast< Box* >(object);
  (void)_this;
}
void Box::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Box& Box::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Box_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void Box::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.Box)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.Box)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.Box)
  return target;
}

size_t Box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.Box)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Box::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.Box)
  GOOGLE_DCHECK_NE(&from, this);
  const Box* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Box>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.Box)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.Box)
    MergeFrom(*source);
  }
}

void Box::MergeFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.Box)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Box::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box::CopyFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box::IsInitialized() const {
  return true;
}

void Box::InternalSwap(Box* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Box::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dict_Item::InitAsDefaultInstance() {
  ::veinsgym::proto::_Dict_Item_default_instance_._instance.get_mutable()->value_ = const_cast< ::veinsgym::proto::Space*>(
      ::veinsgym::proto::Space::internal_default_instance());
}
class Dict_Item::_Internal {
 public:
  static const ::veinsgym::proto::Space& value(const Dict_Item* msg);
};

const ::veinsgym::proto::Space&
Dict_Item::_Internal::value(const Dict_Item* msg) {
  return *msg->value_;
}
Dict_Item::Dict_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.Dict.Item)
}
Dict_Item::Dict_Item(const Dict_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  if (from._internal_has_value()) {
    value_ = new ::veinsgym::proto::Space(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.Dict.Item)
}

void Dict_Item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dict_veinsgym_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

Dict_Item::~Dict_Item() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.Dict.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dict_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Dict_Item::ArenaDtor(void* object) {
  Dict_Item* _this = reinterpret_cast< Dict_Item* >(object);
  (void)_this;
}
void Dict_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dict_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dict_Item& Dict_Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dict_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void Dict_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.Dict.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dict_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "veinsgym.proto.Dict.Item.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .veinsgym.proto.Space value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dict_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.Dict.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "veinsgym.proto.Dict.Item.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .veinsgym.proto.Space value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.Dict.Item)
  return target;
}

size_t Dict_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.Dict.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .veinsgym.proto.Space value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dict_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.Dict.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Dict_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dict_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.Dict.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.Dict.Item)
    MergeFrom(*source);
  }
}

void Dict_Item::MergeFrom(const Dict_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.Dict.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::veinsgym::proto::Space::MergeFrom(from._internal_value());
  }
}

void Dict_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.Dict.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dict_Item::CopyFrom(const Dict_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.Dict.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dict_Item::IsInitialized() const {
  return true;
}

void Dict_Item::InternalSwap(Dict_Item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dict_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dict::InitAsDefaultInstance() {
}
class Dict::_Internal {
 public:
};

Dict::Dict(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.Dict)
}
Dict::Dict(const Dict& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.Dict)
}

void Dict::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dict_veinsgym_2eproto.base);
}

Dict::~Dict() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.Dict)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dict::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Dict::ArenaDtor(void* object) {
  Dict* _this = reinterpret_cast< Dict* >(object);
  (void)_this;
}
void Dict::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dict& Dict::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dict_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void Dict::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.Dict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dict::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .veinsgym.proto.Dict.Item values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dict::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.Dict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .veinsgym.proto.Dict.Item values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.Dict)
  return target;
}

size_t Dict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.Dict)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .veinsgym.proto.Dict.Item values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dict::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.Dict)
  GOOGLE_DCHECK_NE(&from, this);
  const Dict* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dict>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.Dict)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.Dict)
    MergeFrom(*source);
  }
}

void Dict::MergeFrom(const Dict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.Dict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Dict::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.Dict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dict::CopyFrom(const Dict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.Dict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dict::IsInitialized() const {
  return true;
}

void Dict::InternalSwap(Dict* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dict::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Discrete::InitAsDefaultInstance() {
}
class Discrete::_Internal {
 public:
};

Discrete::Discrete(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.Discrete)
}
Discrete::Discrete(const Discrete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.Discrete)
}

void Discrete::SharedCtor() {
  value_ = PROTOBUF_ULONGLONG(0);
}

Discrete::~Discrete() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.Discrete)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Discrete::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Discrete::ArenaDtor(void* object) {
  Discrete* _this = reinterpret_cast< Discrete* >(object);
  (void)_this;
}
void Discrete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Discrete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Discrete& Discrete::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Discrete_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void Discrete::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.Discrete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Discrete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Discrete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.Discrete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.Discrete)
  return target;
}

size_t Discrete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.Discrete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Discrete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.Discrete)
  GOOGLE_DCHECK_NE(&from, this);
  const Discrete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Discrete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.Discrete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.Discrete)
    MergeFrom(*source);
  }
}

void Discrete::MergeFrom(const Discrete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.Discrete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Discrete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.Discrete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Discrete::CopyFrom(const Discrete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.Discrete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Discrete::IsInitialized() const {
  return true;
}

void Discrete::InternalSwap(Discrete* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Discrete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiBinary::InitAsDefaultInstance() {
}
class MultiBinary::_Internal {
 public:
};

MultiBinary::MultiBinary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.MultiBinary)
}
MultiBinary::MultiBinary(const MultiBinary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.MultiBinary)
}

void MultiBinary::SharedCtor() {
}

MultiBinary::~MultiBinary() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.MultiBinary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiBinary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiBinary::ArenaDtor(void* object) {
  MultiBinary* _this = reinterpret_cast< MultiBinary* >(object);
  (void)_this;
}
void MultiBinary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiBinary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiBinary& MultiBinary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiBinary_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void MultiBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.MultiBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiBinary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiBinary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.MultiBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.MultiBinary)
  return target;
}

size_t MultiBinary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.MultiBinary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiBinary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.MultiBinary)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiBinary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiBinary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.MultiBinary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.MultiBinary)
    MergeFrom(*source);
  }
}

void MultiBinary::MergeFrom(const MultiBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.MultiBinary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void MultiBinary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.MultiBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiBinary::CopyFrom(const MultiBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.MultiBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiBinary::IsInitialized() const {
  return true;
}

void MultiBinary::InternalSwap(MultiBinary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiBinary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiDiscrete::InitAsDefaultInstance() {
}
class MultiDiscrete::_Internal {
 public:
};

MultiDiscrete::MultiDiscrete(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.MultiDiscrete)
}
MultiDiscrete::MultiDiscrete(const MultiDiscrete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.MultiDiscrete)
}

void MultiDiscrete::SharedCtor() {
}

MultiDiscrete::~MultiDiscrete() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.MultiDiscrete)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiDiscrete::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiDiscrete::ArenaDtor(void* object) {
  MultiDiscrete* _this = reinterpret_cast< MultiDiscrete* >(object);
  (void)_this;
}
void MultiDiscrete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiDiscrete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiDiscrete& MultiDiscrete::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiDiscrete_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void MultiDiscrete::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.MultiDiscrete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiDiscrete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiDiscrete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.MultiDiscrete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 values = 1;
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.MultiDiscrete)
  return target;
}

size_t MultiDiscrete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.MultiDiscrete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 values = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiDiscrete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.MultiDiscrete)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiDiscrete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiDiscrete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.MultiDiscrete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.MultiDiscrete)
    MergeFrom(*source);
  }
}

void MultiDiscrete::MergeFrom(const MultiDiscrete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.MultiDiscrete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void MultiDiscrete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.MultiDiscrete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiDiscrete::CopyFrom(const MultiDiscrete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.MultiDiscrete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDiscrete::IsInitialized() const {
  return true;
}

void MultiDiscrete::InternalSwap(MultiDiscrete* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDiscrete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tuple::InitAsDefaultInstance() {
}
class Tuple::_Internal {
 public:
};

Tuple::Tuple(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:veinsgym.proto.Tuple)
}
Tuple::Tuple(const Tuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:veinsgym.proto.Tuple)
}

void Tuple::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dict_veinsgym_2eproto.base);
}

Tuple::~Tuple() {
  // @@protoc_insertion_point(destructor:veinsgym.proto.Tuple)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tuple::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Tuple::ArenaDtor(void* object) {
  Tuple* _this = reinterpret_cast< Tuple* >(object);
  (void)_this;
}
void Tuple::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tuple& Tuple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dict_veinsgym_2eproto.base);
  return *internal_default_instance();
}


void Tuple::Clear() {
// @@protoc_insertion_point(message_clear_start:veinsgym.proto.Tuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tuple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .veinsgym.proto.Space values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tuple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:veinsgym.proto.Tuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .veinsgym.proto.Space values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:veinsgym.proto.Tuple)
  return target;
}

size_t Tuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:veinsgym.proto.Tuple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .veinsgym.proto.Space values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tuple::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:veinsgym.proto.Tuple)
  GOOGLE_DCHECK_NE(&from, this);
  const Tuple* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tuple>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:veinsgym.proto.Tuple)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:veinsgym.proto.Tuple)
    MergeFrom(*source);
  }
}

void Tuple::MergeFrom(const Tuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:veinsgym.proto.Tuple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Tuple::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:veinsgym.proto.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuple::CopyFrom(const Tuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:veinsgym.proto.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuple::IsInitialized() const {
  return true;
}

void Tuple::InternalSwap(Tuple* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tuple::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace veinsgym
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::veinsgym::proto::Request* Arena::CreateMaybeMessage< ::veinsgym::proto::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::Reply* Arena::CreateMaybeMessage< ::veinsgym::proto::Reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::Reply >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::Init* Arena::CreateMaybeMessage< ::veinsgym::proto::Init >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::Init >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::Shutdown* Arena::CreateMaybeMessage< ::veinsgym::proto::Shutdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::Shutdown >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::Step* Arena::CreateMaybeMessage< ::veinsgym::proto::Step >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::Step >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::Space* Arena::CreateMaybeMessage< ::veinsgym::proto::Space >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::Space >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::Box* Arena::CreateMaybeMessage< ::veinsgym::proto::Box >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::Box >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::Dict_Item* Arena::CreateMaybeMessage< ::veinsgym::proto::Dict_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::Dict_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::Dict* Arena::CreateMaybeMessage< ::veinsgym::proto::Dict >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::Dict >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::Discrete* Arena::CreateMaybeMessage< ::veinsgym::proto::Discrete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::Discrete >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::MultiBinary* Arena::CreateMaybeMessage< ::veinsgym::proto::MultiBinary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::MultiBinary >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::MultiDiscrete* Arena::CreateMaybeMessage< ::veinsgym::proto::MultiDiscrete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::MultiDiscrete >(arena);
}
template<> PROTOBUF_NOINLINE ::veinsgym::proto::Tuple* Arena::CreateMaybeMessage< ::veinsgym::proto::Tuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::veinsgym::proto::Tuple >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
